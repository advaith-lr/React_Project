{"version":3,"sources":["service/DataService.tsx","components/Header/Header.tsx","components/WeatherCard/CardItem.tsx","components/WeatherCard/WeatherCard.tsx","components/WeatherContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["data","cityJson","Header","titleGreeting","onDateChange","className","src","alt","defaultValue","onChange","e","target","value","label","CardItem","title","units","size","proxyAddress","baseUrl","callAPI","city","a","fetch","res","json","woeid","weatherRes","consolidated_weather","weatherArrayInternal","console","warn","currentDate","Date","today","toISOString","split","setDate","getDate","tomorrow","twoDaysLater","getrequireDaysWeather","weatherArray","whatDate","weatherData","log","filter","applicable_date","weatherDataInit","min_temp","max_temp","wind_speed","the_temp","humidity","weather_state_name","weather_state_abbr","wind_direction_compass","visibility","air_pressure","calculateCtoF","centVal","calculateFtoC","farVal","WeatherCard","useState","setWeatherArray","setWeatherData","icon","setIcon","isC","setIsC","isLoading","setIsLoading","useEffect","fetchWeatherData","DataService","role","style","cursor","onClick","Math","round","toString","concat","height","width","cities","WeatherContainer","ContainerStyle","map","index","margin","App","when","setWhen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","QueryClient","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1320346.chunk.js","sourcesContent":["export const proxyAddress = 'http://localhost:8080';\r\nexport const baseUrl = 'https://www.metaweather.com'\r\n\r\nlet data : any;\r\nlet cityJson : any ;\r\n\r\nexport async function callAPI(city: String){\r\n    let weatherArrayInternal : any;\r\n    try{\r\n        const res : any= await fetch(\r\n            `${proxyAddress}/${baseUrl}/api/location/search/?query=${city}`\r\n        );\r\n            cityJson = await res.json(); //Contains Woeid to call the weather API\r\n\r\n        const weatherRes : any= await fetch(\r\n        `${proxyAddress}/${baseUrl}/api/location/${cityJson[0].woeid}`\r\n        );\r\n        data = await weatherRes.json(); // Contains full response data obect \r\n        weatherArrayInternal = await data.consolidated_weather; \r\n        // Contains array with data of different dates\r\n        return  weatherArrayInternal;\r\n    }catch{\r\n        console.warn('fetchFailed')\r\n        return  'E';\r\n    }\r\n}\r\n\r\nvar currentDate = new Date()\r\nlet today = currentDate.toISOString().split('T')[0];\r\ncurrentDate.setDate((currentDate.getDate() + 1));\r\nlet tomorrow = currentDate.toISOString().split('T')[0]; \r\ncurrentDate.setDate((currentDate.getDate() + 1));\r\nlet twoDaysLater = currentDate.toISOString().split('T')[0]; \r\n\r\nexport const  getrequireDaysWeather = (weatherArray: any, whatDate: String) =>{\r\n  let weatherData:any ={};\r\n  console.log(weatherArray)\r\n  if(whatDate === 'today') {\r\n      weatherData = weatherArray.filter((weatherData : any)=>{\r\n          return  (weatherData.applicable_date === today) // Today's weather data \r\n      })\r\n  }\r\n  if(whatDate === 'tomorrow') {\r\n      weatherData = weatherArray.filter(( weatherData : any)=>{\r\n          return  weatherData.applicable_date === tomorrow // Tomorrow's weather data \r\n      })\r\n  }\r\n  if(whatDate === 'twoDaysLater') {\r\n      weatherData =  weatherArray.filter((weatherData : any)=>{\r\n          return  weatherData.applicable_date === twoDaysLater //Day after tomorrow's data\r\n      })\r\n  }\r\n  return weatherData[0]; \r\n}","import './Header.css'\r\n// import { useState, useEffect } from 'react';\r\n// import { setConstantValue } from 'typescript';\r\n// import  VolvoLogo  from '../volvo.png'\r\ntype HeaderProps = {\r\n    titleGreeting: string,\r\n    onDateChange: any\r\n  }\r\n\r\nexport const Header = ( { titleGreeting, onDateChange } : HeaderProps ) => {\r\n\r\n  \r\n  let selectedOptionvalue = 'tomorrow'\r\n  \r\n    return (\r\n        // <div classNameName= 'row navbar navbar-inverse\"'>\r\n        //     Hello {titleGreeting}, Welcome to the weather app\r\n        // </div>\r\n        \r\n<div data-testid=\"header-elemet\" className=\"navbar ad-header\">\r\n  <div className=\"container-fluid\">\r\n    <div className=\"navbar-header \">\r\n    <img src={process.env.PUBLIC_URL + '/volvo.png' } alt=\"React Logo\" /> &nbsp;\r\n        Hello <b>{titleGreeting}</b>, \r\n    </div>\r\n      <div className = \"d-flex\">\r\n       <span>Weather for: &nbsp;</span> \r\n       <span>\r\n         {/* Change between different dates */}\r\n       <select className=\"form-select ad-select \" \r\n       defaultValue={selectedOptionvalue}\r\n       onChange = {(e) =>onDateChange((e.target.value))}\r\n        aria-label=\"Default select example\">\r\n        <option value=\"today\" label= \"Today\"></option>\r\n        <option value=\"tomorrow\" label= \"Tomorrow\" ></option>\r\n        <option value=\"twoDaysLater\" label= \"2 Days later\">  </option>\r\n      </select>\r\n       </span>\r\n      \r\n      </div>\r\n\r\n  </div>\r\n</div>\r\n  \r\n    )\r\n}\r\n\r\n","\r\ntype ItemType= {\r\n    title : string;\r\n    value : string;\r\n    units : string;\r\n    size: string;\r\n    children: any; \r\n}\r\n\r\nexport const CardItem = ({ title, value, units, size } : ItemType) => {\r\n    return (\r\n            <span className={`px-2 ${size} heading `}>\r\n                <span className =\"text-muted\" >{title}: </span>\r\n                <i> {value} {units}</i>  \r\n            </span> \r\n    )\r\n}\r\n","import  './WeatherCard.css'\r\nimport { useState, useEffect } from 'react';\r\nimport {CardItem} from './CardItem'\r\nimport * as DataService from \"./../../service/DataService\"\r\n// import { createNull } from 'typescript';\r\n\r\ntype CardProps ={\r\n    city: String;\r\n    whatDate : String;\r\n}\r\n\r\n\r\ninterface WeatherData {\r\n    min_temp: number;\r\n    max_temp: number;\r\n    the_temp: number;\r\n    humidity: number;\r\n    weather_state_name: String;\r\n    weather_state_abbr: String;\r\n    applicable_date: Date | null;\r\n    wind_speed: number;\r\n    wind_direction_compass: String;\r\n    visibility : number;\r\n    air_pressure: number;\r\n  }\r\nlet weatherDataInit: WeatherData = {\r\n    min_temp : 0,\r\n    max_temp : 0,\r\n    wind_speed : 0,\r\n    the_temp : 0,\r\n    humidity: 0,\r\n    weather_state_name : \"\",\r\n    weather_state_abbr : \"\",\r\n    wind_direction_compass : \"\",\r\n    applicable_date : null,\r\n    visibility : 0,\r\n    air_pressure: 0\r\n}\r\n\r\nexport const calculateCtoF  = ( centVal : number) =>  centVal * 9 / 5 + 32;\r\nexport const calculateFtoC  = ( farVal : number) =>  (farVal - 32) * 5 / 9;;\r\n\r\nexport const WeatherCard = ({city, whatDate}: CardProps) => {\r\n    // const [woeid, setWoeid] = useState([]);\r\n    const [weatherArray, setWeatherArray] = useState<any| null>(null);\r\n    const [weatherData, setWeatherData] = useState<WeatherData>(weatherDataInit)\r\n    const [icon, setIcon] = useState(\"\");\r\n    const [isC, setIsC] = useState(true);\r\n    // const [when, setWhen] = useState(whatDate);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    let weatherArrayInternal :any ;\r\n    useEffect(() => {\r\n        // here goes the data fetching \r\n        const fetchWeatherData = async () => {\r\n            \r\n            if(weatherArray === null){\r\n                await setIsLoading(true)\r\n                weatherArrayInternal = await DataService.callAPI(city) // Call API and get the weather data of the city passed\r\n                await setIsLoading(false) \r\n            }\r\n            else{\r\n                weatherArrayInternal = weatherArray;\r\n            }\r\n            \r\n                await setWeatherArray(weatherArrayInternal);\r\n            if(weatherArrayInternal != 'E'){\r\n                await setIsC(true);\r\n                let weatherData : WeatherData =  await DataService.getrequireDaysWeather(weatherArrayInternal, whatDate );//Get required date's weather data\r\n                await setWeatherData(weatherData);\r\n                await setIcon(`${DataService.baseUrl}/static/img/weather/png/64/${weatherData.weather_state_abbr}.png`)\r\n            }\r\n          };\r\n\r\n          fetchWeatherData();\r\n    },[whatDate]);\r\n\r\n    const toggleCtoF = () => {\r\n        setIsC(!isC);\r\n        \r\n        if(isC){\r\n            setWeatherData({...weatherData,\r\n                             min_temp : calculateCtoF(weatherData.min_temp),\r\n                             max_temp : calculateCtoF(weatherData.max_temp), \r\n                            })\r\n        }  \r\n        else{\r\n            setWeatherData({...weatherData, min_temp : calculateFtoC(weatherData.min_temp),\r\n                            max_temp : calculateFtoC(weatherData.max_temp), \r\n                             })\r\n        }\r\n    }\r\n    return (\r\n        <div data-testid = {`card-${city}`} className=\"col-lg-4 col-md-6 col-sm-6 col-xs-12 \">\r\n            <div className=\"card\" >\r\n            { weatherArray === 'E' && \r\n                 <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Failed to fetch Data\r\n                </div>\r\n            }\r\n                \r\n                <div className=\"row \" style={{ cursor: 'pointer'}}>\r\n                    \r\n                    <div className=\"card-title col-8 px-4\" onClick ={toggleCtoF}> {/* Toggle between celsius and Farenheit */}\r\n                        <h2> {city} </h2>\r\n \r\n                        <div className=\"tempClass\">\r\n                        <CardItem \r\n                            title = \"H\" \r\n                            value= { Math.round(weatherData.max_temp).toString() }  \r\n                            units = {'\\u00B0'.concat(isC ? 'c' : 'f') }\r\n                            size = 'h4'>\r\n                        </CardItem>  \r\n                        <CardItem \r\n                            title = \"L\" \r\n                            value= { Math.round(weatherData.min_temp).toString() }  \r\n                            units = {'\\u00B0'.concat(isC ? 'c' : 'f') }\r\n                            size = 'h4'>\r\n                        </CardItem> \r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-4 text-center my-2\" >\r\n                        <img className=\"border border-dark rounded\" src= {icon} height= \"64px\" width= \"64px\" alt=\"Loading\"/>\r\n                        <p className=\"font-weight-bold\">{weatherData.weather_state_name} </p>\r\n                    </div>\r\n                </div>\r\n                {isLoading ? <div className=\"d-flex justify-content-center\">\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"sr-only\"></span>\r\n                </div>\r\n            </div> : <div/> }\r\n                <div className=\" card-text\" >\r\n                    {/* <h2 >\r\n                        { Math.round(weatherData.the_temp)  } &deg; \r\n                        {isC ? 'c' : 'f' } \r\n                    </h2>  */}\r\n                    <div >\r\n                       \r\n                    </div >\r\n                    <div className= \"row py-2\">\r\n                        <div className= \"col-6 \">\r\n                            <CardItem \r\n                                title = \"Wind\" \r\n                                value= {(weatherData.wind_direction_compass + ' ').concat(Math.round(weatherData.wind_speed).toString())}  \r\n                                units = \"mph\"\r\n                                size = 'h7'>\r\n                            </CardItem>   \r\n                        </div>\r\n                        <div className= \"col-6\">\r\n                            <CardItem \r\n                                title = \"Humidity\" \r\n                                value= {Math.round(weatherData.humidity).toString()}  \r\n                                units = \"%\"\r\n                                size = 'h7'>\r\n                            </CardItem>   \r\n                        </div>\r\n                    </div>\r\n                    <div className= \"row py-2\">\r\n                        <div className= \"col-6\">\r\n                            <CardItem \r\n                                title = \"Visibility\" \r\n                                value= {Math.round(weatherData.visibility).toString()}  \r\n                                units = \"miles\"\r\n                                size = 'h7'>\r\n                            </CardItem>   \r\n                        </div>\r\n                        <div className= \"col-6\">\r\n                            <CardItem \r\n                                title = \"Preasure\" \r\n                                value= {Math.round(weatherData.air_pressure).toString()}  \r\n                                units = \"mbar\"\r\n                                size = 'h7'>\r\n                            </CardItem>   \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { WeatherCard } from \"./WeatherCard/WeatherCard\"\r\n\r\ntype conTainerProps = {\r\n    whatDate : string;\r\n}\r\n\r\nlet cities = ['Gothenburg','Stockholm', 'Mountain View', 'London', 'New York', 'Berlin'];\r\n\r\nexport const WeatherContainer = ({ whatDate } : conTainerProps ) => {\r\n    return (\r\n        <div data-testid=\"weather-container\" style = {ContainerStyle}>\r\n            <div className= \"row\">\r\n            {cities.map( (city,index) => <WeatherCard key={ index } city = { city } whatDate = {whatDate} />)}\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst ContainerStyle = {\r\n    margin: '20px'\r\n}","import React from 'react';\n\nimport {useState, useEffect} from \"react\";\nimport { Header} from './components/Header/Header'\nimport { WeatherContainer }  from './components/WeatherContainer'\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n \n\n// Components\n\n// import Item from './Item/Item';\n// import Cart from './Cart/Cart';\n\n\n\n\n\n// const fetchData = () => {\n//   // return fetch(\"https://meta-weather.vercel.app/api/location/2487956/2021/10/20/\")\n//   //       .then((response) => response.json())\n//   //       .then((data) => console.log(data));}\n//   //https://meta-weather.vercel.app/api//location/search/?query=${city}\n\n//   return fetch(\"http://localhost:8080/https://www.metaweather.com/api/location/search/?query=london\",{\n\n//   })\n//        .then((response) => response.json())\n//          .then((data) => console.log(data));\n//         }\n\n\n\n\nconst  App =() => {\n\n  const [when, setWhen] = useState('tomorrow')\n  const handleChange = (value : any) => {\n    console.log(value)\n    setWhen(value)\n  }\n  useEffect(() => {\n    \n    }, []);\n\n  return (\n    <div data-testid=\"App\" className=\"App\">\n      \n      <Header titleGreeting = 'Volvo' onDateChange = {handleChange} ></Header> \n       \n      <WeatherContainer whatDate = {when}/>\n    </div>\n  );\n}\n\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { QueryClient , QueryClientProvider} from 'react-query'\n\nconst client = new QueryClient();\n\nReactDOM.render(\n      <QueryClientProvider client = {client}>\n         <App /> \n      </QueryClientProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}